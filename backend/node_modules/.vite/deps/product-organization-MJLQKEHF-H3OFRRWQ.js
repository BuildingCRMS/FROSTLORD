import {
  PRODUCT_DETAIL_FIELDS
} from "./chunk-YWNKY76Q.js";
import {
  CategoryCombobox
} from "./chunk-4RCTOEMX.js";
import {
  useComboboxData
} from "./chunk-M3SHND6T.js";
import {
  Combobox
} from "./chunk-WVKBD6MD.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-DP54EP6X.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-DF3DAMDT.js";
import {
  FormExtensionZone,
  useExtendableForm
} from "./chunk-ETTKLSZV.js";
import "./chunk-HWNV5K42.js";
import "./chunk-TCAPNIAL.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-DVYK3VDX.js";
import "./chunk-YM3FRBGU.js";
import "./chunk-7M4ICL3D.js";
import "./chunk-RQF55WOK.js";
import "./chunk-5QX4V4M4.js";
import "./chunk-HPGXK5DQ.js";
import "./chunk-GCVUV4YW.js";
import "./chunk-72O3KMW4.js";
import "./chunk-FKQHZRTI.js";
import {
  arrayType,
  objectType,
  stringType
} from "./chunk-4E3X3L63.js";
import "./chunk-TF5WA3EB.js";
import {
  useExtension
} from "./chunk-FTD3ZWHZ.js";
import "./chunk-XKHKX2O4.js";
import "./chunk-Q6LK2N6H.js";
import "./chunk-MX6RFVPC.js";
import "./chunk-HIRVG5HY.js";
import "./chunk-E72KDEXZ.js";
import "./chunk-NV2N3EWM.js";
import "./chunk-7UAYECTW.js";
import "./chunk-QKV675OM.js";
import "./chunk-Y3NYV3NU.js";
import "./chunk-MPXR7HT5.js";
import {
  Form
} from "./chunk-PGOPQ23T.js";
import "./chunk-XLJ6ICJ6.js";
import "./chunk-R3BVY4FC.js";
import "./chunk-HC3T7OYA.js";
import "./chunk-D43E5H7K.js";
import "./chunk-EJ632UQ3.js";
import "./chunk-AHMYJR34.js";
import "./chunk-DTNUC273.js";
import "./chunk-LO7PRBVV.js";
import "./chunk-TPHNIYVN.js";
import "./chunk-WLJHDTUS.js";
import "./chunk-CYVMSYFQ.js";
import "./chunk-5AA5N5ZK.js";
import "./chunk-K5DSQLGH.js";
import "./chunk-MJ4XXNHE.js";
import "./chunk-FZ5DZU53.js";
import "./chunk-JZH33FKG.js";
import "./chunk-XHN7KSXW.js";
import "./chunk-LIPSP7KS.js";
import "./chunk-4FJ2IEZ6.js";
import "./chunk-UKRVZK4B.js";
import "./chunk-Q2CJV6KU.js";
import "./chunk-LNFLNDVO.js";
import "./chunk-LYFHXFNX.js";
import "./chunk-K7ZSLX65.js";
import "./chunk-GRYQSEHO.js";
import "./chunk-GZ2UWOV6.js";
import {
  useProduct,
  useUpdateProduct
} from "./chunk-S5UORU45.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import {
  sdk
} from "./chunk-AYDRMOKL.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-5GF3RGIE.js";
import {
  useParams
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Heading,
  toast
} from "./chunk-VSEXIPN4.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-7FEHWK6I.js";
import "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-organization-MJLQKEHF.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var ProductOrganizationSchema = objectType({
  type_id: stringType().nullable(),
  collection_id: stringType().nullable(),
  category_ids: arrayType(stringType()),
  tag_ids: arrayType(stringType())
});
var ProductOrganizationForm = ({
  product
}) => {
  var _a, _b;
  const { t } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const { getFormConfigs, getFormFields } = useExtension();
  const configs = getFormConfigs("product", "organize");
  const fields = getFormFields("product", "organize");
  const collections = useComboboxData({
    queryKey: ["product_collections"],
    queryFn: (params) => sdk.admin.productCollection.list(params),
    getOptions: (data) => data.collections.map((collection) => ({
      label: collection.title,
      value: collection.id
    }))
  });
  const types = useComboboxData({
    queryKey: ["product_types"],
    queryFn: (params) => sdk.admin.productType.list(params),
    getOptions: (data) => data.product_types.map((type) => ({
      label: type.value,
      value: type.id
    }))
  });
  const tags = useComboboxData({
    queryKey: ["product_tags"],
    queryFn: (params) => sdk.admin.productTag.list(params),
    getOptions: (data) => data.product_tags.map((tag) => ({
      label: tag.value,
      value: tag.id
    }))
  });
  const form = useExtendableForm({
    defaultValues: {
      type_id: product.type_id ?? "",
      collection_id: product.collection_id ?? "",
      category_ids: ((_a = product.categories) == null ? void 0 : _a.map((c) => c.id)) || [],
      tag_ids: ((_b = product.tags) == null ? void 0 : _b.map((t2) => t2.id)) || []
    },
    schema: ProductOrganizationSchema,
    configs,
    data: product
  });
  const { mutateAsync, isPending } = useUpdateProduct(product.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    var _a2;
    await mutateAsync(
      {
        type_id: data.type_id || null,
        collection_id: data.collection_id || null,
        categories: data.category_ids.map((c) => ({ id: c })),
        tags: (_a2 = data.tag_ids) == null ? void 0 : _a2.map((t2) => ({ id: t2 }))
      },
      {
        onSuccess: ({ product: product2 }) => {
          toast.success(
            t("products.organization.edit.toasts.success", {
              title: product2.title
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(KeyboundForm, { onSubmit: handleSubmit, className: "flex h-full flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex h-full flex-col gap-y-4", children: [
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "type_id",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { optional: true, children: t("products.fields.type.label") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox,
                {
                  ...field,
                  options: types.options,
                  searchValue: types.searchValue,
                  onSearchValueChange: types.onSearchValueChange,
                  fetchNextPage: types.fetchNextPage
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "collection_id",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { optional: true, children: t("products.fields.collection.label") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox,
                {
                  ...field,
                  multiple: false,
                  options: collections.options,
                  onSearchValueChange: collections.onSearchValueChange,
                  searchValue: collections.searchValue
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "category_ids",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { optional: true, children: t("products.fields.categories.label") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(CategoryCombobox, { ...field }) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(
        Form.Field,
        {
          control: form.control,
          name: "tag_ids",
          render: ({ field }) => {
            return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { optional: true, children: t("products.fields.tags.label") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox,
                {
                  ...field,
                  multiple: true,
                  options: tags.options,
                  onSearchValueChange: tags.onSearchValueChange,
                  searchValue: tags.searchValue
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] });
          }
        }
      ),
      (0, import_jsx_runtime.jsx)(FormExtensionZone, { fields, form })
    ] }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t("actions.save") })
    ] }) })
  ] }) });
};
var ProductOrganization = () => {
  const { id } = useParams();
  const { t } = useTranslation();
  const { product, isLoading, isError, error } = useProduct(id, {
    fields: PRODUCT_DETAIL_FIELDS
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t("products.organization.edit.header") }) }) }),
    !isLoading && product && (0, import_jsx_runtime2.jsx)(ProductOrganizationForm, { product })
  ] });
};
export {
  ProductOrganization as Component
};
//# sourceMappingURL=product-organization-MJLQKEHF-H3OFRRWQ.js.map
