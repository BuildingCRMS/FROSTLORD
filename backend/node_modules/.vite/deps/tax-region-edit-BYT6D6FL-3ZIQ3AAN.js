import {
  formatProvider
} from "./chunk-LVAKEKGS.js";
import {
  useComboboxData
} from "./chunk-M3SHND6T.js";
import {
  Combobox
} from "./chunk-WVKBD6MD.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-DP54EP6X.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-DF3DAMDT.js";
import "./chunk-RQF55WOK.js";
import "./chunk-5QX4V4M4.js";
import "./chunk-GCVUV4YW.js";
import {
  t
} from "./chunk-FKQHZRTI.js";
import {
  external_exports
} from "./chunk-4E3X3L63.js";
import "./chunk-NV2N3EWM.js";
import {
  Form,
  useForm
} from "./chunk-PGOPQ23T.js";
import "./chunk-XLJ6ICJ6.js";
import "./chunk-R3BVY4FC.js";
import "./chunk-HC3T7OYA.js";
import "./chunk-D43E5H7K.js";
import {
  useTaxRegion,
  useUpdateTaxRegion
} from "./chunk-EJ632UQ3.js";
import "./chunk-AHMYJR34.js";
import "./chunk-DTNUC273.js";
import "./chunk-LO7PRBVV.js";
import "./chunk-TPHNIYVN.js";
import "./chunk-WLJHDTUS.js";
import "./chunk-CYVMSYFQ.js";
import "./chunk-5AA5N5ZK.js";
import "./chunk-K5DSQLGH.js";
import "./chunk-MJ4XXNHE.js";
import "./chunk-FZ5DZU53.js";
import "./chunk-JZH33FKG.js";
import "./chunk-XHN7KSXW.js";
import "./chunk-LIPSP7KS.js";
import "./chunk-4FJ2IEZ6.js";
import "./chunk-UKRVZK4B.js";
import "./chunk-Q2CJV6KU.js";
import "./chunk-LNFLNDVO.js";
import "./chunk-LYFHXFNX.js";
import "./chunk-K7ZSLX65.js";
import "./chunk-GRYQSEHO.js";
import "./chunk-GZ2UWOV6.js";
import "./chunk-S5UORU45.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import {
  sdk
} from "./chunk-AYDRMOKL.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-5GF3RGIE.js";
import {
  useParams
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Heading,
  toast
} from "./chunk-VSEXIPN4.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-7FEHWK6I.js";
import "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/tax-region-edit-BYT6D6FL.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var TaxRegionEditSchema = external_exports.object({
  provider_id: external_exports.string().min(1)
});
var TaxRegionEditForm = ({ taxRegion }) => {
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const taxProviders = useComboboxData({
    queryKey: ["tax_providers"],
    queryFn: (params) => sdk.admin.taxProvider.list(params),
    getOptions: (data) => data.tax_providers.map((provider) => ({
      label: formatProvider(provider.id),
      value: provider.id
    }))
  });
  const form = useForm({
    defaultValues: {
      provider_id: taxRegion.provider_id
    },
    resolver: t(TaxRegionEditSchema)
  });
  const { mutateAsync, isPending } = useUpdateTaxRegion(taxRegion.id);
  const handleSubmit = form.handleSubmit(async (values) => {
    await mutateAsync(
      {
        provider_id: values.provider_id
      },
      {
        onSuccess: () => {
          toast.success(t2("taxRegions.edit.successToast"));
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(
    KeyboundForm,
    {
      className: "flex flex-1 flex-col overflow-hidden",
      onSubmit: handleSubmit,
      children: [
        (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { className: "flex flex-1 flex-col gap-y-6 overflow-auto", children: (0, import_jsx_runtime.jsx)("div", { className: "flex flex-col gap-y-4", children: (0, import_jsx_runtime.jsx)(
          Form.Field,
          {
            control: form.control,
            name: "provider_id",
            render: ({ field }) => (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
              (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("taxRegions.fields.taxProvider") }),
              (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
                Combobox,
                {
                  ...field,
                  options: taxProviders.options,
                  searchValue: taxProviders.searchValue,
                  onSearchValueChange: taxProviders.onSearchValueChange,
                  fetchNextPage: taxProviders.fetchNextPage
                }
              ) }),
              (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
            ] })
          }
        ) }) }),
        (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { className: "shrink-0", children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
          (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
          (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
        ] }) })
      ]
    }
  ) });
};
var TaxRegionEdit = () => {
  const { t: t2 } = useTranslation();
  const { id } = useParams();
  const { tax_region, isPending, isError, error } = useTaxRegion(id);
  const ready = !isPending && !!tax_region;
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsxs)(RouteDrawer.Header, { children: [
      (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("taxRegions.edit.header") }) }),
      (0, import_jsx_runtime2.jsx)(RouteDrawer.Description, { className: "sr-only", children: t2("taxRegions.edit.hint") })
    ] }),
    ready && (0, import_jsx_runtime2.jsx)(TaxRegionEditForm, { taxRegion: tax_region })
  ] });
};
export {
  TaxRegionEdit as Component
};
//# sourceMappingURL=tax-region-edit-BYT6D6FL-3ZIQ3AAN.js.map
