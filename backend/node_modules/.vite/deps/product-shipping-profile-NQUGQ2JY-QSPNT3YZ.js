import {
  PRODUCT_DETAIL_FIELDS
} from "./chunk-YWNKY76Q.js";
import {
  useComboboxData
} from "./chunk-M3SHND6T.js";
import {
  Combobox
} from "./chunk-WVKBD6MD.js";
import "./chunk-EGRHWZRV.js";
import {
  KeyboundForm
} from "./chunk-DP54EP6X.js";
import {
  RouteDrawer,
  useRouteModal
} from "./chunk-DF3DAMDT.js";
import "./chunk-ETTKLSZV.js";
import "./chunk-HWNV5K42.js";
import "./chunk-TCAPNIAL.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-DVYK3VDX.js";
import "./chunk-YM3FRBGU.js";
import "./chunk-7M4ICL3D.js";
import "./chunk-RQF55WOK.js";
import "./chunk-5QX4V4M4.js";
import "./chunk-HPGXK5DQ.js";
import "./chunk-GCVUV4YW.js";
import "./chunk-72O3KMW4.js";
import {
  t
} from "./chunk-FKQHZRTI.js";
import {
  objectType,
  stringType
} from "./chunk-4E3X3L63.js";
import "./chunk-TF5WA3EB.js";
import "./chunk-FTD3ZWHZ.js";
import "./chunk-XKHKX2O4.js";
import "./chunk-Q6LK2N6H.js";
import "./chunk-MX6RFVPC.js";
import "./chunk-HIRVG5HY.js";
import "./chunk-E72KDEXZ.js";
import "./chunk-NV2N3EWM.js";
import "./chunk-7UAYECTW.js";
import "./chunk-QKV675OM.js";
import "./chunk-Y3NYV3NU.js";
import "./chunk-MPXR7HT5.js";
import {
  Form,
  useForm
} from "./chunk-PGOPQ23T.js";
import "./chunk-XLJ6ICJ6.js";
import "./chunk-R3BVY4FC.js";
import "./chunk-HC3T7OYA.js";
import "./chunk-D43E5H7K.js";
import "./chunk-EJ632UQ3.js";
import "./chunk-AHMYJR34.js";
import "./chunk-DTNUC273.js";
import "./chunk-LO7PRBVV.js";
import "./chunk-TPHNIYVN.js";
import "./chunk-WLJHDTUS.js";
import "./chunk-CYVMSYFQ.js";
import "./chunk-5AA5N5ZK.js";
import "./chunk-K5DSQLGH.js";
import "./chunk-MJ4XXNHE.js";
import "./chunk-FZ5DZU53.js";
import "./chunk-JZH33FKG.js";
import "./chunk-XHN7KSXW.js";
import "./chunk-LIPSP7KS.js";
import "./chunk-4FJ2IEZ6.js";
import "./chunk-UKRVZK4B.js";
import "./chunk-Q2CJV6KU.js";
import "./chunk-LNFLNDVO.js";
import "./chunk-LYFHXFNX.js";
import "./chunk-K7ZSLX65.js";
import "./chunk-GRYQSEHO.js";
import "./chunk-GZ2UWOV6.js";
import {
  useProduct,
  useUpdateProduct
} from "./chunk-S5UORU45.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import {
  sdk
} from "./chunk-AYDRMOKL.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-5GF3RGIE.js";
import {
  useParams
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Heading,
  toast
} from "./chunk-VSEXIPN4.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-7FEHWK6I.js";
import "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-shipping-profile-NQUGQ2JY.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var ProductShippingProfileSchema = objectType({
  shipping_profile_id: stringType()
});
var ProductShippingProfileForm = ({
  product
}) => {
  var _a;
  const { t: t2 } = useTranslation();
  const { handleSuccess } = useRouteModal();
  const shippingProfiles = useComboboxData({
    queryKey: ["shipping_profiles"],
    queryFn: (params) => sdk.admin.shippingProfile.list(params),
    getOptions: (data) => data.shipping_profiles.map((shippingProfile) => ({
      label: shippingProfile.name,
      value: shippingProfile.id
    }))
  });
  const form = useForm({
    defaultValues: {
      shipping_profile_id: ((_a = product.shipping_profile) == null ? void 0 : _a.id) ?? ""
    },
    resolver: t(ProductShippingProfileSchema)
  });
  const selectedShippingProfile = form.watch("shipping_profile_id");
  const { mutateAsync, isPending } = useUpdateProduct(product.id);
  const handleSubmit = form.handleSubmit(async (data) => {
    await mutateAsync(
      {
        shipping_profile_id: data.shipping_profile_id === "" ? null : data.shipping_profile_id
      },
      {
        onSuccess: ({ product: product2 }) => {
          toast.success(
            t2("products.shippingProfile.edit.toasts.success", {
              title: product2.title
            })
          );
          handleSuccess();
        },
        onError: (error) => {
          toast.error(error.message);
        }
      }
    );
  });
  (0, import_react.useEffect)(() => {
    if (typeof selectedShippingProfile === "undefined") {
      form.setValue("shipping_profile_id", "");
    }
  }, [selectedShippingProfile]);
  return (0, import_jsx_runtime.jsx)(RouteDrawer.Form, { form, children: (0, import_jsx_runtime.jsxs)(KeyboundForm, { onSubmit: handleSubmit, className: "flex h-full flex-col", children: [
    (0, import_jsx_runtime.jsx)(RouteDrawer.Body, { children: (0, import_jsx_runtime.jsx)("div", { className: "flex h-full flex-col gap-y-4", children: (0, import_jsx_runtime.jsx)(
      Form.Field,
      {
        control: form.control,
        name: "shipping_profile_id",
        render: ({ field }) => {
          return (0, import_jsx_runtime.jsxs)(Form.Item, { children: [
            (0, import_jsx_runtime.jsx)(Form.Label, { children: t2("products.fields.shipping_profile.label") }),
            (0, import_jsx_runtime.jsx)(Form.Control, { children: (0, import_jsx_runtime.jsx)(
              Combobox,
              {
                ...field,
                allowClear: true,
                options: shippingProfiles.options,
                searchValue: shippingProfiles.searchValue,
                onSearchValueChange: shippingProfiles.onSearchValueChange,
                fetchNextPage: shippingProfiles.fetchNextPage
              }
            ) }),
            (0, import_jsx_runtime.jsx)(Form.ErrorMessage, {})
          ] });
        }
      }
    ) }) }),
    (0, import_jsx_runtime.jsx)(RouteDrawer.Footer, { children: (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-end gap-x-2", children: [
      (0, import_jsx_runtime.jsx)(RouteDrawer.Close, { asChild: true, children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t2("actions.cancel") }) }),
      (0, import_jsx_runtime.jsx)(Button, { size: "small", type: "submit", isLoading: isPending, children: t2("actions.save") })
    ] }) })
  ] }) });
};
var ProductShippingProfile = () => {
  const { id } = useParams();
  const { t: t2 } = useTranslation();
  const { product, isLoading, isError, error } = useProduct(id, {
    fields: PRODUCT_DETAIL_FIELDS
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime2.jsxs)(RouteDrawer, { children: [
    (0, import_jsx_runtime2.jsx)(RouteDrawer.Header, { children: (0, import_jsx_runtime2.jsx)(RouteDrawer.Title, { asChild: true, children: (0, import_jsx_runtime2.jsx)(Heading, { children: t2("products.shippingProfile.edit.header") }) }) }),
    !isLoading && product && (0, import_jsx_runtime2.jsx)(ProductShippingProfileForm, { product })
  ] });
};
export {
  ProductShippingProfile as Component
};
//# sourceMappingURL=product-shipping-profile-NQUGQ2JY-QSPNT3YZ.js.map
